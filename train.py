import argparse
import os
import pandas as pd
from sklearn.ensemble import RandomForestClassifier, IsolationForest
from joblib import dump

# ğŸ“Œ DÃ©finir les arguments d'entrÃ©e
parser = argparse.ArgumentParser()
parser.add_argument("--input_data", type=str, required=True, help="Chemin vers le dossier contenant preprocessed.csv")
parser.add_argument("--output_model", type=str, required=True, help="Dossier de sortie pour les modÃ¨les")
args = parser.parse_args()

# ğŸ“¥ Charger les donnÃ©es prÃ©traitÃ©es
input_path = os.path.join(args.input_data, "preprocessed.csv")
df = pd.read_csv(input_path)

# âœ… Nettoyage : supprimer les lignes contenant des NaN
df = df.dropna()

# âœ… SÃ©parer les features et le label
X = df.drop(columns=["label"], errors="ignore")
y = df["label"]

# âœ… CrÃ©er le dossier de sortie sâ€™il nâ€™existe pas
os.makedirs(args.output_model, exist_ok=True)

# âœ… Sauvegarder les noms des colonnes utilisÃ©es pour l'entraÃ®nement
with open(os.path.join(args.output_model, "feature_names.txt"), "w") as f:
    f.write(",".join(X.columns))

# âœ… EntraÃ®ner un modÃ¨le RandomForest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X, y)
dump(rf_model, os.path.join(args.output_model, "rf_model.joblib"))
print("âœ… RandomForest entraÃ®nÃ© et sauvegardÃ©.")

# âœ… EntraÃ®ner un modÃ¨le IsolationForest
iso_forest = IsolationForest(n_estimators=100, contamination=0.1, random_state=42)
iso_forest.fit(X)
dump(iso_forest, os.path.join(args.output_model, "iso_forest.joblib"))
print("âœ… IsolationForest entraÃ®nÃ© et sauvegardÃ©.")